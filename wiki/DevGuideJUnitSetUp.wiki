#summary How to prepare for and tearing down after JUnit test cases.

= Setting up and tearing down JUnit test cases that use GWT code =

When using JUnit test case, any objects your test creates and leaves a reference to will remain active.  This could interfere with future test cases.  In the GWT 1.5 release, you can override two new methods to prepare for and/or clean up after each test method.

 * `gwtSetUp()` runs before each test method in a test case.
 * `gwtTearDown()` runs after each test method in a test case.

In GWT versions prior to GWT 1.5, you can override the standard JUnit `setUp()` and `tearDown()` methods.  However, you are not allowed to use JSNI methods or code that depends on deferred binding (which includes almost all of the UI library).

The following example shows how to defensively cleanup the DOM before the next test run using `gwtSetUp()`.  It skips over `<iframe>` and `<script>` tags so that the GWT test infrastructure is not accidentally removed.

{{{
  import com.google.gwt.junit.client.GWTTestCase;
  import com.google.gwt.user.client.DOM;
  import com.google.gwt.user.client.Element;

  private static native String getNodeName(Element elem) /*-{
     return (elem.nodeName || "").toLowerCase();
  }-*/;

  /**
   * Removes all elements in the body, except scripts and iframes.
   */
  public void gwtSetUp () {
    Element bodyElem = RootPanel.getBodyElement();

    List<Element> toRemove = new ArrayList<Element>();
    for (int i = 0, n = DOM.getChildCount(bodyElem); i < n; ++i) {
      Element elem = DOM.getChild(bodyElem, i);
      String nodeName = getNodeName(elem);
      if (!"script".equals(nodeName) && !"iframe".equals(nodeName)) {
        toRemove.add(elem);
      }
    }

    for (int i = 0, n = toRemove.size(); i < n; ++i) {
      DOM.removeChild(bodyElem, toRemove.get(i));
    }
  }
}}}