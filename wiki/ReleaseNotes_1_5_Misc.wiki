#summary Miscellaneous Features & Improvements

= Miscellaneous Features & Improvements =

  * * Application creator now creates a default css file * 
  If your application's name is !MyApp, then the default css file will be named !MyApp.css.

  * *Binary only annotations can be used in translatable source *
  Of course, this is in addition to source-only annotations.

  * * Generators *
    * Expose Java 1.5 constructs like annotations and generics to Generator authors
    * Generators can now mark Artifacts created by !GeneratorContext.tryCreateResource() as being private; these files will be emitted into the module's auxiliary directory. This is a change that ties into the new Linker subsystem introduced in 1.5.
    * Generators can now send custom Artifact instances to the Linker stack via !GeneratorContext.commitArtifact(). This change also ties into the new Linker subsystem.

  * * New <rename-to> module XML tag * 
  The module XML file now supports an optional attribute "rename-to" which will change the name of the module produced by the compiler. This allows you to do such things as create drop-in replacements for your module by creating various working modules that can be renamed to your standard module name.

  * * Call Java constructors from JSNI code *
  Java constructors can now be called directly from JSNI via the ::new method reference.

  * * Added GWTTestSuite classes to optimize the order in which GWTTestCases are executed. *

  * * Upgraded !DateTimeConstants data to CLDR 1.51, and added the firstDayOfTheWeek and weekendRange formatting symbols. *

  * * Removed dependency on java.util.Locale in !LocalizableGenerator for BCP47 compatibility. *

  * * User.gwt.xml now inherits the I18N module because standard widgets now support bidi. *  


GWT.getVersion() reports what version of GWT was used to compile your application.
GWT.isClient() can be used to detect whether shared code is running in the browser (as
opposed to on a server).
JavaScriptException now provides access to the underlying JS object that was thrown.
Long emulation, and all that entails; longs are no longer value types in JSNI,
@SuppressWarnings("restriction").
Just for fun: add "-Dgwt.jjs.traceMethods=className.methodName" and see what the
compiler does to your method. className can be fully-qualified or not, methodName
can be "*" to trace all methods in a class. You can also provide a colon-separated list of
items. You can also append the JSNI signature of the method to disambiguate
overloads.

Use Duration.currentTimeMillis() instead of System.currentTimeMillis() due to long
emulation.
Arrays.asList() is a really efficient array-backed collection; if you already have an array
sitting around it allows you to avoid the linear-time copy of all the elements.
JUnit:
- Running JUnit tests over many test classes at once can be sped up remarkably by
organizing test classes into GWTTestSuites (Eric added 1.5 doc for this).
- Benchmarks have moved out of com.google.gwt.junit to com.google.gwt.benchmarks;
existing client code will need to reorganize imports to the correct package. Range has
been completely removed in favor of java.lang.Iterable.
- We implemented -manual web mode to allow you to target the running test with any
browser (there should be some 1.5 doc Eric wrote to link to)
- setUp/tearDown replaced with gwtSetUp/gwtTearDown (Eric doc again)
Oh yeah, we added a metadata warning escape hatch, "-Dgwt.nowarn.metadata"