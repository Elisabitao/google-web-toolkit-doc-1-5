#summary One-sentence summary of this page.

= Compatibility with the Java language and libraries =

== Language support ==

GWT supports most of the core Java language syntax and semantics, but there are a few differences you will want to be aware of.

  Note: As of GWT 1.5, GWT compiles the Java language syntax that is compatible with J2SE 1.5 or earlier. Versions of GWT prior to GWT 1.5 are limited to Java 1.4 source compatibility. For example, GWT 1.5 supports generics, whereas GWT 1.4 does not.

It is important to remember that the target language of your GWT application is ultimately !JavaScript, so there are some differences between running your application in [DevGuideHostedMode hosted mode] and [DevGuideWebMode web mode]:

  *   * Intrinsic types*: No big surprises here. `byte`, `char`, `short`, `int`, `float`, `double`, `Object`, `String`, arrays, user-defined classes, etc. are all supported as you would hope. There is one surprise regarding the `long` type: !JavaScript has no 64-bit integral type, so `long` needs special consideration. Prior to GWT 1.5, the `long` type was was simply mapped to the integral range of a 64-bit !JavaScript _floating-point_ value, giving `long` variables an actual  range less than the full 64 bits. As of GWT 1.5, `long` works correctly over the entire 64-bit range.

  * * Long emulation in GWT 1.5 or later *:  Since !JavaScript has no 64-bit integral type, the type `long` is supported via special math emulation code emitted by the GWT compiler. Behind the scenes, `long` values are represented as pairs of 32-bit integers, which limits your ability to use them within [DevGuideJavaScriptNativeInterface JSNI code] because the native JavaScript math operators do not recognize them.

  *   * Exceptions*: `try`, `catch`, `finally` and user-defined exceptions are supported as normal, although `Throwable.getStackTrace()` is not meaningfully supported in web mode.

  Note: Several fundamental exceptions normally produced by the Java VM, most notably `NullPointerException`, `StackOverflowError`, and `OutOfMemoryError`, do not occur in web mode. Since !JavaScript is kinda slow, the overhead of explicitly checking for such conditions would devastate your code's performance. Finding these sorts of errors _before_ you compile to web mode is the key: that's the point of [DevGuideHostedMode hosted mode]!
  
  *   * Assertions*:  `assert` statements are always active in hosted mode because it's a great way for GWT libraries to provide lots of helpful error checking while you're debugging. The GWT compiler removes and ignores all assertions by default, but you can enable them in web mode by specifying the `-ea` flag to `GWTCompiler`.

  *   * Multithreading and Synchronization*:     !JavaScript interpreters are single-threaded, so while GWT silently accepts the `synchronized` keyword, it has no real effect. Synchronization-related library methods are not available, including `Object.wait()`, `Object.notify()`, and `Object.notifyAll().`  The compiler will ignore the synchronized keywork but will refuse to compile yoru code if the `Object` related syncronization methods are invoked.

  *   * Reflection*:    For maximum efficiency, GWT compiles your Java source into a monolithic script, and does not support subsequent dynamic loading of classes. This and other optimizations preclude general support for reflection. It is possible to query an object for its class name using [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/core/client/GWT.html#getTypeName(java.lang.Object) GWT.getTypeName(Object)].   

  *   * Finalization*:    !JavaScript does not support object finalization during garbage collection, so GWT is not able to be honor Java finalizers in web mode.   

  *   * Strict Floating-Point*:    The Java language specification precisely defines floating-point support, including single-precision and double-precision numbers as well as the `strictfp` keyword. GWT does not support the `strictfp` keyword and can not ensure any particular degree of floating-point precision in translated code, so you may want to avoid calculations in client-side code that require a guaranteed level of floating-point precision.  

== Runtime library support ==

GWT supports only a small subset of the classes available in the Java 2 Standard and Enterprise Edition libraries, as these libraries are quite large and rely on functionality that is unavailable within web browsers. To find out exactly which classes and methods are supported for core Java runtime packages, see the API reference for [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/java/lang.html java.lang] and [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/java/util.html java.util], which lists supported classes and contains notes on behavioral differences from the standard Java runtime.  


 _Tip: You will save yourself a lot of frustration if you make sure that you use only [DevGuideJavaToJavaScriptCompiler translatable] classes in your [DevGuideClientSide client-side code] from the very beginning. To help you identify problems early, your code is checked against the JRE emulation library whenever you run in [DevGuideHostedMode hosted mode]. As a result, most uses of unsupported libraries will be caught the first time you attempt to run your application. So, _run early and often_._

==Differences between JRE and emulated classes==

Some specific areas in which GWT emulation differs from the standard Java runtime: 

  *   * Regular Expressions*:    The syntax of [http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html Java regular expressions] is similar, but not identical, to [http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Guide:Regular_Expressions JavaScript regular expressions]. For example, the [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/java/lang/String.html#replaceAll(java.lang.String,%20java.lang.String) replaceAll] and [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/java/lang/String.html#split(java.lang.String) split] methods use regular expressions. So, you will probably want to be careful to only use Java regular expressions that have the same meaning in !JavaScript.  

  *   * Serialization*:   Java serialization relies on a few mechanisms that are not available in compiled !JavaScript, such as dynamic class loading and reflection. As a result, GWT does not support standard Java serialization. Instead, GWT has an [DevGuideRemoteProcedureCalls RPC] facility that provides automatic object serialization to and from the server for the purpose of invoking remote methods.   


 _Note: For a list of JRE classes that GWT can translate out of the box, see the [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/html/jre.html documentation for the GWT JRE emulation library]._

==Classes that provide similar functionality==

In some classes, the functionality of the class is too expensive to be emulated entirely, so a similar routine in another package is provided instead.  Here are some commonly used routines that provide a subset of the native JRE  functionality:

 * [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/i18n/client/DateTimeFormat.html com.google.gwt.i18n.client.DateTimeFormat] : Supports a subset of `java.util.DateTimeFormat`.  See examples in the [DevGuideDateAndNumberFormatting date and number formatting] section.
 * [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/i18n/client/NumberFormat.html com.google.gwt.i18n.client.NumberFormat] : Supports a subset of `java.util.NumberFormat`.  See examples in the [DevGuideDateAndNumberFormatting date and number format] section.
 * [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/user/client/rpc/IsSerializable.html com.google.gwt.user.client.rpc] : A marker class used similarly to `java.io.Serializable` for GWT-RPC
 * [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/user/client/Timer.html com.google.gwt.user.client.Timer] : A simplified, browser-safe timer class. This class serves the same purpose as `java.util.Timer`, but is simplified because of the single-threaded environment.