#summary GWT supports most core Java 1.4 language semantics, but there are a few differences you will want to be aware of.
#labels ToDelete

=Language Support=

GWT compiles Java source that is compatible with J2SE 1.5 or earlier.  However, since the target language of your GWT application is !JavaScript, there are some runtime differences when you run your application in web mode:

  *   * Intrinsic types*:     `byte`, `char`, `short`, `int`, `long`, `float`, `double`, `Object`, `String`, and arrays are supported. However, there is no 64-bit integral type in !JavaScript, so variables of type `long` are mapped onto !JavaScript double-precision floating point values. To ensure maximum consistency between hosted mode and web mode, we recommend that you use `int` variables.  

  *   * Exceptions*:     `try`, `catch`, `finally` and user-defined exceptions are supported as normal, although `Throwable.getStackTrace()` is not supported for web mode. See [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/java/lang/Throwable.html Throwable] for additional details.
  
  *   * Assertions*:    The GWT compiler parses Java `assert` statements, but it does not emit code !JavaScript code for them.  

  *   * Multithreading and Synchronization*:     !JavaScript interpreters are single-threaded, so while GWT silently accepts the `synchronized` keyword, it has no real effect. Synchronization-related library methods are not available, including `Object.wait()`, `Object.notify()`, and `Object.notifyAll().`  The compiler will ignore the synchronized keywork but will refuse to compile yoru code if the `Object` related syncronization methods are invoked.

  *   * Reflection*:    For maximum efficiency, GWT compiles your Java source into a monolithic script, and does not support subsequent dynamic loading of classes. This and other optimizations preclude general support for reflection. It is possible to query an object for its class name using [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/core/client/GWT.html#getTypeName(java.lang.Object) GWT.getTypeName(Object)].   

  *   * Finalization*:    !JavaScript does not support object finalization during garbage collection, so GWT is not able to be honor Java finalizers in web mode.   

  *   * Strict Floating-Point*:    The Java language specification precisely defines floating-point support, including single-precision and double-precision numbers as well as the `strictfp` keyword. GWT does not support the `strictfp` keyword and can not ensure any particular degree of floating-point precision in translated code, so you may want to avoid calculations in client-side code that require a guaranteed level of floating-point precision.  

===See Also===

  * [DevGuideJavaRuntimeSupport Runtime Library Support] - Describes the subset of the JRE libraries available to GWT developers.
